<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知与行</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-24T14:01:09.350Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>QiYan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机基础</title>
    <link href="http://example.com/2022/11/24/combute-basic/"/>
    <id>http://example.com/2022/11/24/combute-basic/</id>
    <published>2022-11-24T14:01:09.352Z</published>
    <updated>2022-11-24T14:01:09.350Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding flat"><p>本文旨在简单的介绍计算机的组成，包含硬件、操作系统等内容。本内容是以B站马哥Linux运维课程中的操作系统基础结合相关资料整理而来。</p></div><h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><p>一台计算机由硬件、操作系统、程序组成。<br><img src="https://note.youdao.com/yws/api/personal/file/WEB9a0b832f9f9e5a95d12a836ab6d53630?method=download&shareKey=c00765b3eaaae0cc10aa16760a4ea955" alt="image"></p><p>硬件是计算机的基础，计算机的硬件组成可以分为运算器、控制器、存储器、输入&#x2F;输出设备。其中运算器和控制器是构成CPU的主要部分。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB760447eef5a97f121df438b75fc68075?method=download&shareKey=52b7a07d9bf375629854264a447c7701" alt="image"> </p><p>各元件之间的逻辑连接关系如下图所示。各元件之间通过地址线、数据线和控制信号线组成的本地总线链接。目前采用总线复用技术让地址、数据和控制信号使用同一条线路。早期的32位CPU中，其地址线和数据线分别都是32位，因此地址寻址空间范围为2的32次方字节，即从0到4G。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe1436f00078189da4932a78923a7936d?method=download&shareKey=e149a2a88f09bcd5958ce514327a5d64" alt="image"></p><p>早期系统通过两个芯片组进行各元件的连接，分别是： </p><ul><li>北桥：负责链接CPU、内存、显卡等高速设备  </li><li>南桥：负责链接硬盘、网卡、USB等低速设备</li></ul><p>目前北桥已经被整合到了CPU里面，下图为PRO-SW-W480-ACE主板说明图</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB09bda74bccf0f8982f80819324ce11e4?method=download&shareKey=300ea9f175b5eced9beef2872360c0d4" alt="image"></p><h2 id="硬件介绍"><a href="#硬件介绍" class="headerlink" title="硬件介绍"></a>硬件介绍</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>CPU由数十亿个微型晶体管构成。它的工作可以分为三个关键阶段：CPU从系统的主存中提取指令、然后解码该指令的实际内容、然后再由CPU的相关部分执行该指令。CPU内部由寄存器、控制器、运算器和时钟四部分组成，各部分之间通过电信号连接。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf5eeafe804430692ad0e9eead5a1a983?method=download&shareKey=687699edd636019aa7f7d2be4f2605db" alt="image">  </p><ul><li><strong>时    钟</strong>：负责发出CPU开始计时的时钟信号。</li><li><strong>运算器</strong>：负责运算从内存中读入寄存器的数据。 </li><li><strong>寄存器</strong>：可以看作内存的一种，用来暂存指令、数据和地址。  </li><li><strong>控制器</strong>：负责把内存上的指令，数据读入寄存器，并根据指令的结果控制计算机。</li></ul><p>根据功能的不同，可以将寄存器划分为下面这几类。 </p><table><thead><tr><th align="center">种类</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">累加寄存器</td><td align="center">存储运行的数据和运算后的数据</td></tr><tr><td align="center">标志寄存器</td><td align="center">用于反映处理器的状态和运算结果的某些特征以及控制指令的执行</td></tr><tr><td align="center">程序计数器</td><td align="center">用于存放下一条指令所在单元的地址的地方</td></tr><tr><td align="center">基址寄存器</td><td align="center">存储数据内存的起始位置</td></tr><tr><td align="center">变址寄存器</td><td align="center">存储基址寄存器的相对位置</td></tr><tr><td align="center">通用寄存器</td><td align="center">存储任意数据</td></tr><tr><td align="center">指令寄存器</td><td align="center">储存正在被运行的指令，CPU内部使用，程序员无法对该寄存器进行读写</td></tr><tr><td align="center">栈寄存器</td><td align="center">存储栈区域的起始位置</td></tr></tbody></table><p>其中程序计数器、累加寄存器、标志寄存器、指令寄存器和栈寄存器都只有一个，其它寄存器一般有多个。在内存中的存储通过地址编号来表示，而寄存器的种类则通过名字来区分。</p><p>至于CPU的指令集，那就是Intel的架构师们的工作。总之，CPU认识这些指令，并且能执行运算。这些指令我们称之为机器代码。机器代码由二进制的01字符串构成不利于人们阅读，因此人们在机器代码的基础上开发了一套汇编代码。汇编代码只有转换为本地代码才能运行。  </p><p>CPU 采用了一系列的措施加快指令的执行过程：</p><blockquote><p>流水线：有电子厂打工经历的读者肯定很熟悉这个流水线模式。CPU的流水线工作方式和工业生产上的流水线概念一样。就是将一个指令的执行过程也分解为多个步骤，CPU中的每个电路只执行其中一个步骤，这样前赴后继加快执行速度。CPU中多个不同功能的电路单元组成一条指令处理流水线，然后将一条指令分成几个步骤后再由这些电路单元分别执行。在执行过程中，指令源源不断的送往CPU。让每个电路单元都不闲着，这样就大大的加快了执行速度。  </p></blockquote><blockquote><p>超线程：CPU在进行线程切换的时候，要执行 切换各种寄存器状态等一些操作。把第一个线程的各种寄存器状态写回缓存中保存，然后把第二个线程的相关内容送到各种寄存器上。该过程必不可少，否则待会再将第一个线程切换回来时，不知道该线程的各个状态， 那还怎么接着继续执行呢？也正因为如此，所以这个过程比较慢，大概需要几万个时钟周期。所以后来做了这样的设计，把每个寄存器等都多做一个，就是多做一组寄存器(也包括一些其他相关电路等),CPU在执行A线程时，使用的第一组寄存器，切换到B线程，直接使用第二组寄存器，然后再切换A线程时，再使用第一组寄存器。，CPU就不用再傻傻的等着寄存器值的切换，线程切换只需要几个时钟周期就够了。对于普通的执行多任务的计算机，CPU线程切换是个非常频繁的操作，所以使用该技术就会节省大量的时钟周期。也就是相当于加快了CPU的执行速度。这就是CPU宣传参数中所谓的四核八线程的由来，其实就是超线程技术。(每个核多做一组寄存器等电路固然会占用宝贵的空间，但是它带来的优点远远大于缺点)。 </p></blockquote><blockquote><p>超标量技术: CPU可以在每个时钟周期内执行多个操作,可以实行指令的并行运算。在下面这个设计中，存在多个执行单元，例如，一个用来进行整数运算、一个用来浮点数运算、一个用来布尔运算。两个或更多的指令被一次性取出、解码并放入缓冲区中，直至它们执行完毕。只要一个执行单元空闲，就会去检查缓冲区是否有可以执行的指令。如果有，就把指令从缓冲区中取出来并执行。这种设计的含义是应用程序通常是无序执行的。在大多数情况下，硬件负责保证这种运算的结果与顺序执行指令时的结果相同。  </p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/WEBca6d3f2ca384de5d257b260ead71d115?method=download&shareKey=a7e4eea3d1346b04d1eada1e71e3b1bf" alt="image">  </p><blockquote><p>乱序执行: 我们认为程序都是顺序执行的。但是在CPU层面上，指令的执行顺序并不一定与它们在机器级程序(汇编)中的顺序一样。比如 a &#x3D; b+c; d++;这两个语句 不按照顺序执行也不会影响最终结果。当然这只是在CPU执行指令的层面，在程序员们看来，依旧认为程序是顺序执行的。</p></blockquote><blockquote><p>多核芯片：在芯片上有效地承载了四个微型芯片，每个微型芯片都有自己独立的CPU。</p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0b07646c4ecb73a0add4e1b5a2a9dfff?method=download&shareKey=7f5a08db7f8b74d0587553a87fafcb62" alt="image">  </p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存是一种随机存储器（RAM），表示既可以从中读取数据，也可以写入数据。当机器关闭时，内存中的信息会丢失。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3eba4f99e53218fdec72fec4e08d9090?method=download&shareKey=f3f97c1a5885c0788caa1c94c0379427" alt="image">  </p><p>内存是编址的，编址的单位是字节（不是比特）。为了便于理解，我们把内存模型映射成为我们现实世界的模型。在现实世界中，内存的模型很像我们生活中的楼房。在这个楼房中，1层可以存储一个字节的数据，楼层号就是地址。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8993750ef7e3c66bac2868347fa8c680?method=download&shareKey=818ed6e9b52b16bec7a2247ba9780d24" alt="image">  </p><p>内存的内部是由各种IC电路（集成电路）组成的。内存IC是一个完整的结构，它内部也有电源、地址信号、数据信号、控制信号和用于寻址的IC引脚来进行数据的读写。下面是一个虚拟的IC引脚示意图。   </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2e9c34cbbec8776b666c35b72bb3b0bc?method=download&shareKey=c943f31ea062208c46c05dd12b6979de" alt="image">  </p><p>图中VCC和GND表示电源，A0-A9是地址信号的引脚，D0-D7表示的是数据信号、RD和WR都是控制信号。将电源链接到VCC和GND后，就可以对其它引脚传递0和1的信号，大多数情况下，+5V表示1,0V表示0。</p><p>我们都知道内存是用来存储数据，那么这个内存IC中能存储多少数据呢？D0-D7表示的是数据信号，也就是说，一次可以输入输出8bit &#x3D; 1byte的数据。A0~A9是地址信号共十个，表示可以指定00000 00000 - 11111 11111共2的10次方&#x3D;1024个地址。每个地址都会存放1byte的数据，因此我们可以得出内存IC的容量就是1KB。 </p><p>如果我们使用的是512MB的内存，这就相当于是512000（512*1000）个内存IC。当然，一台计算机不太可能有这么多个内存IC，然而，通常情况下，一个内存IC会有更多的引脚，也就能存储更多的数据。</p><p>内存IC读写过程如下：  </p><ul><li>写入数据：首先给VCC接通+5V的电源，给GND接通0V的电源，使用A0-A9来指定数据的存储场所，然后再把数据的值输入给D0-D7的数据信号，并把WR（write）的值置为1，执行完这些操作后，即可以向内存IC写入数据。</li><li>读入数据：只需要通过A0-A9的地址信号指定数据的存储场所，然后再将RD的值置为1即可。</li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEB81497d419eab65105d73ab9cd72f29b2?method=download&shareKey=86c4562d73c7ae4724b901546c120882" alt="image">  </p><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>磁盘和内存都具有存储功能，它们都是存储设备。内存是一种高速、造价昂贵的存储设备，通过电流来实现存储。而磁盘则是速度较慢、造价低廉的存储设备，通过磁记录技术实现存储。磁盘是一种机械装置，在一个磁盘中有一个或多个金属盘片，他们以5400rpm、7200rpm、10800rpm或更高的速度旋转。从边缘开始有一个机械臂悬横在盘面上，这类似于老式播放塑料唱片33转唱机上的拾音臂。信息会写在磁盘一系列的同心圆上。在任意一个给定臂的位置，每个磁头可以读取一段环形区域，称为磁道。把一个给定臂的位置上的所有磁道合并起来，组成了一个柱面。   </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1ce7db34d73ec40ecb6ea85135bc6f18?method=download&shareKey=24f1372be02346ec060fc1de5f77a9e5" alt="image">  </p><blockquote><p>注意：固态硬盘不是磁盘，固态硬盘并没有可以移动的部分，外形也不像唱片，并且数据是存储在存储器（闪存）中。与磁盘唯一的相似之处就是它也存储了大量即使在电源关闭也不会丢失的数据。</p></blockquote><h3 id="输入-x2F-输出设备和设备驱动程序"><a href="#输入-x2F-输出设备和设备驱动程序" class="headerlink" title="输入&#x2F;输出设备和设备驱动程序"></a>输入&#x2F;输出设备和设备驱动程序</h3><p>I&#x2F;O设备一般包括两个部分：设备控制器和设备本身。任何一个硬件设备内部的电路可能跟CPU内部的电路都不一致。因此控制器负责将外部设备的信号转换成CPU总线上能理解的信号以及控制外部设备的传输速率、校验等功能。即I&#x2F;O控制器能够接受操作系统的指令，控制设备。I&#x2F;O控制器中也有用于临时保存输入输出数据的内存，这个内存我们称之为I&#x2F;O内存。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb7382c303e9917c95e83b6edbe2cdd4d?method=download&shareKey=dc3a6ac1c609075617bffd1cc30123a6" alt="image">  </p><h2 id="计算机概念"><a href="#计算机概念" class="headerlink" title="计算机概念"></a>计算机概念</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>计算机的运行离不开程序，程序由指令和数据两部分组成。计算机运行过程中CPU所使用的指令和数据都是来自于主内存。不论是软件程序还是数据，都必须要读入主内存后CPU才能利用。由于CPU的计算速度远大于从内存操作数据的速度，直观表现就是程序的性能在极大程度上受到内存访问次数的影响，内存访问次数越多，性能越差，所以才引入缓存从而减少cpu访问内存的次数。CPU中的缓存分为三层。一二级缓存私有，三级缓存共享。一级缓存分为数据缓存和指令缓存。缓存之所以可以减少CPU访问内存的次数是由于程序的局部性原理：</p><ul><li><p>时间局部性：被引用过一次的存储器位置中的内容在未来会被多次引用  </p></li><li><p>空间局部性：如果一个存储器位置的内容被引用，那么它附近的位置也很大概率被引用。</p></li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbe7ae989c55df12e9e5c9016b7414bd6?method=download&shareKey=c3a7b4196623b3fed8259fab738a9928" alt="image"></p><h3 id="IO端口"><a href="#IO端口" class="headerlink" title="IO端口"></a>IO端口</h3><p>计算机接了这么多的外部设备，CPU如何区分不同的I&#x2F;O设备呢？类比计算机区分和互联网通信的各个进程的方法，计算机区分不同的和外部通信的进程靠的是套接字，也就是ip地址+端口号。这里cpu区分不同I&#x2F;O设备靠的也是端口号，称为I&#x2F;O端口，在一台计算机上I&#x2F;O端口的数目也是65535个。任何一个硬件设备通过IO总线接入计算机的时，它必须一开机就申请注册一批连续的I&#x2F;O端口。</p><h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>为了更充分的使用CPU的运算能力，计算机引入了多任务的概念。多任务的实现依赖于CPU的时间切片以及虚拟内存地址两项技术。CPU的时间切片可以理解为一项任务运行5ms之后切换其它任务执行，即通过时间片轮转的方法使不同的程序并发执行。虚拟内存地址：由进程的虚地址构成的地址空间。我的理解是CPU中每一个进程的内存地址都是0-某个值（比如1024），根据不同的进程映射到不同的内存地址中。</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>当计算机上运行多个任务，这时从键盘上输入数据或者移动鼠标时计算机是如何快速响应的？这就依赖于中断机制。程序运行过程中，系统外部、系统内部或者现行程序本身若出现紧急事件，处理机立即中止现行程序的运行，自动转入相应的处理程序(中断服务程序)，待处理完后，再返回原来的程序运行，这整个过程称为程序中断;</p><p>I&#x2F;O设备和CPU之间的信息交流通过中断机制来实现。中断是用来暂停当前正在运行的程序，然后跳转到其他程序运行的必要机制。  </p><p>每个设备发送信号通知CPU来查看，CPU怎么得知是哪个设备的信号呢？可能你会想到通过I&#x2F;O端口来识别，但I&#x2F;O端口是实现数据交互而不是识别信号交互的。中断控制器就登场了。</p><p>中断控制器（Interrupt Controller）：CPU外置芯片，接收中断信号。当某个外部设备（例如网卡卡）传来信号，CPU中断当前操作，将此信号接收至内存中。中断控制器上连接着中断线，每根线代表一个设备（不是固定的设备），用来区分外部设备，线路是可以复用的。</p><h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><p>直接存储器访问（DMA）: 它可以控制内存和某些控制器之间的数据传输，而无需CPU的干预。比如希望外设A的数据拷贝到外设B，只要给两种外设提供一条数据通路，直接让数据由A拷贝到B不经过CPU的处理。由CPU在内存中划好某次传输数据所需空间，并授权某根线路给DMA使用。否则，CPU 需要从来源把每一片段的数据复制到暂存器，之后把它们再次写回到新的进程空间。在这个时间中，CPU 对于其他的工作来说就无法使用。</p><p>DMA依赖于CPU外置的DMA控制器芯片。在实现DMA传输时，是由DMA控制器直接掌管总线。因此，存在着一个总线控制权转移问题。即DMA传输前，CPU要把总线控制权交给DMA控制器。而在结束DMA传输后，DMA控制器应立即把总线控制权再交回给CPU。一个完整的DMA传输过程必须经过DMA请求、DMA响应、DMA传输、DMA结束4个步骤。</p><p>在物理内存当中，最低地址段中的空间就预留给了DMA。一般大小为16M。在DMA最前面还有1M使用的空间是留给BIOS。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB672d57b20ba18a9f89a4467c41770579?method=download&shareKey=8b548b2cebd4abe92784a69245f7a0ad" alt="image">  </p><h3 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h3><p>现在CPU都是多核的，而在服务器领域使用多颗CPU是正常的。在SMP（对称多处理器：一块主板上有多个CPU插槽）多CPU架构中，每个插槽称为一个socket。当多个CPU访问同一个内存，传统上多CPU对于内存的访问是总线方式。总线方式就会存在资源争用和临界区问题，而且如果不断的增加CPU数量，内存的争用会愈演愈烈。这就体现在4核CPU的跑分性能达不到2核CPU的2倍，甚至1.5倍都没有。理论上来说这种方式实现12core以上的CPU已经没有太大的意义。</p><p>为了防止多颗CPU访问内存出现资源争用，可以为每个CPU分配一个专用内存并且配有专用控制器。由于内存属于系统级别，内核加载时有可能把数据加载到不同CPU的专用内存上。同时每个CPU都有自己的进程队列，这些队列会不断被内核进行平衡（rebalancing），确保资源平均利用。这样就有可能会导致1号CPU需要到2号CPU的专用内存上读写数据，这种现象称为非一致性内存访问（NUMA）。如下图，CPU 0-3访问自己的内存需要1、2、3步骤（3个时钟周期），而访问CPU 4-7的内存需要1、1a、2、3步骤，其中1a就需要消耗3个时钟周期。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe521c3b43a42aca7e0cc418a043987de?method=download&shareKey=9162438460f30dcd3d07f9640f50dd5c" alt="image"></p><p>在企业中，NUMA问题是很常见的。为了避免内存间交叉访问导致性能下降，可以禁止内核进行平衡。对于比较繁忙的、需要经常执行的批处理服务进程可以采取CPU绑定策略。</p><p>Intel的NUMA解决方案：放弃总线的访问方式，将CPU划分到多个Node中。每个node有自己独立的内存空间。各个node之间通过高速互联通讯，通讯通道被称为QuickPath Interconnect即QPI。</p><h3 id="多信道设计"><a href="#多信道设计" class="headerlink" title="多信道设计"></a>多信道设计</h3><p>由于所有的数据都必须要存放在主内存，所以主内存的数据宽度当然是越大越好。 但传统的总线宽度一般大约仅达64比特。为了加大这个宽度，芯片组厂商就将两个主内存汇整在一起。如果一支内存可达64比特，两支内存就可以达到128比特了。这就是双信道的设计理念。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>操作系统是硬件层上的一层软件，它提供系统调用并屏蔽了硬件层面上的差异。操作系统负责整个计算机的内存管理、硬件管理、文件管理以及应用管理。</p><p>有时我们将操作系统也称为虚拟机。因为我们只有一块cpu芯片(可能是多核心的)，只有一块内存，只有一个鼠标，只有一个键盘……。每个进程都想独占这一整套资源。cpu可以通过时间片轮转的方式将一个cpu芯片虚拟成多个cpu运行。内存的虚拟通过分页机制和虚拟地址空间。现在已经把计算机系统中最重要的两个部件CPU和内存虚拟出来了。剩下的那些I&#x2F;O设备如何虚拟呢？其实IO虚拟不需要专门去做，因为当前哪个进程获得了系统使用权，I&#x2F;O设备就交给该进程。</p><h3 id="CPU指令模式"><a href="#CPU指令模式" class="headerlink" title="CPU指令模式"></a>CPU指令模式</h3><p>有了操作系统之后。在某一时刻，要么是内核进程（操作系统核心）在上面运行，要么是用户空间进程在上面运行。内核在cpu上运行时称为内核模式，进程在cpu上运行时称为用户模式。在内存中内核占据的那段内存空间称为内核空间，用户进程占据的空间叫用户空间。用户模式时，进程是不能直接控制硬件的。这是因为在cpu内部，cpu制造商将cpu能运行的指令划分为４层(仅对x86架构而言)，ring0，ring1，ring2，ring3。由于历史原因，ring1和ring2并没有使用，linux只用了ring0和ring3。ring0称为内核模式，也称为特权指令模式，可以直接操控硬件。ring3是用户模式，可以执行一般指令。</p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>内存是易失性存储，即断电之后所有数据都会被清空。CPU运行所需的指令和数据都要从内存中获取。那么计算机是如何启动的呢？</p><p>在计算机主板上有一个ROM芯片（非易失性存储），该芯片存储了BIOS程序。在按下电源键之后系统会自动将BIOS程序加载到内存中然后执行。BIOS程序主要负责确定硬件是否正常，没有异常的话会根据配置文件（存储在CMOS）中的设备启动顺序查找MBR（主引导记录）。</p><p>MBR会查找活动分区，加载活动分区中的内核代码。然后将控制权转移给内核。接下来就进入操作系统的启动流程。</p><p>目前最新的是UEFI+GPT方式。UEFI可以认为是BIOS的升级版。GPT是MBR的升级版，2T以上的硬盘需要使用gpt。</p><h3 id="设备驱动"><a href="#设备驱动" class="headerlink" title="设备驱动"></a>设备驱动</h3><p>设备驱动程序是I&#x2F;O系统的高层与设备控制器之间的通信程序，工作在内核模式。其主要任务：</p><ul><li>再把它转化为具体要求，发送给设备控制器，启动设备去执行。</li><li>反方向，它也将由设备控制器发来的信号，传送给上层软件。</li><li>接收上层软件发来的抽象I&#x2F;O要求（Linux中一切皆文件），如read、write等命令；</li></ul><h3 id="固件和驱动"><a href="#固件和驱动" class="headerlink" title="固件和驱动"></a>固件和驱动</h3><p>固件是直接写入ROM中的程序，比如BIOS。它直接和硬件打交道，指导硬件怎么干活。驱动负责操作系统和设备控制器之间的通信，告诉硬件要干什么。驱动一般运行在操作系统上，由操作系统进行管理。而固件往往直接”固定”在硬件上，直接控制硬件；</p><ul><li><p>eg1：利用打印机打印东西时：</p><ul><li>驱动的作用就是告诉打印机，要打印什么。</li><li>固件则告诉打印机，要怎么执行操作(把纸弄上打印区，然后喷墨，从哪里出纸等)。</li></ul></li><li><p>eg2. BIOS即为主板上的固件，功能 ：上电 - 进入BIOS - 自检(检查设备是否正常等) - 初始化各个模块(内存以及加载其他必要的固件等) - 转移控制到系统启动程序。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note orange icon-padding flat"><p>本文简单介绍了计算机组成、硬件组成（CPU、内存、硬盘、IO设备）、连接方式、计算机基础概念（IO端口、中断、DMA、SMP、多通道）、计算机如何启动、驱动和固件等相关内容。在写作本文的过程中发现我脑子里有东西，但是什么都写不出来。上次面试时面试官问我计算机的组成？我只答出CPU、内存、硬盘、IO设备，CPU从内存中获取指令和数据。好尴尬！！！！真的只能说是一听就会，一说就废。</p></div><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><div class="note blue icon-padding flat"><p>1. 简单描述一下本文讲了些什么？</p><p>2. 简单介绍一下计算机的组成、计算机硬件的连接方式、多任务、计算机如何区分IO设备、CPU如何和IO设备之间交互、DMA机制、SMP架构、多通道、驱动的概念？</p><p>3. 计算机如何启动?</p><p>4. 驱动和固件的区别？</p></div><div class="note green icon-padding flat"><p>**参考内容**：</p> <p>1. B站马哥Linux运维课程中的操作系统基础  </p> <p>2. 内存--通俗理解：<https://blog.csdn.net/youhuakongzhi/article/details/109039652>  </p> <p>3. 程序员必知的硬核知识大全  </p> <p>4. 认识操作系统</p> <p>5. 图解操作系统</p> <p>6. Linux内核完全注释</p> <p>5. 固件和驱动区别 [https://blog.csdn.net/qq_36779888/article/details/108681805](https://blog.csdn.net/qq_36779888/article/details/108681805)</p> </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue icon-padding flat&quot;&gt;
&lt;p&gt;本文旨在简单的介绍计算机的组成，包含硬件、操作系统等内容。本内容是以B站马哥Linux运维课程中的操作系统基础结合相关资料整理而来。&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;计算机组成&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="硬件 操作系统" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="http://example.com/2022/11/24/MakeBlog/"/>
    <id>http://example.com/2022/11/24/MakeBlog/</id>
    <published>2022-11-24T13:58:42.850Z</published>
    <updated>2022-11-24T13:58:42.850Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding flat"><p>为什么写博客？我写博客的原因有三点：将学到的内容表达出来、整合所学的内容串联成为系统、作为自己的知识库。</p><p></p><p>为什么选择个人博客？我搭建个人博客的原因是由于个人博客的样式可控。</p></div><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>机器环境: CentOS Linux release 7.7.1908 (Core)  </li><li>内核环境: 3.10.0-1062.el7.x86_64</li></ul><p>本博客采用nodejs平台+hexo框架+Butterfly主题+Github Pages搭建</p><ul><li>nodejs 是一个javascirpt的运行环境。我的理解为js原本是在浏览器上运行的脚本语言，有了nodejs之后，js就可以像shell脚本一样直接在机器上运行。</li><li>hexo框架是一个基于node.js的快速生成静态博客的框架</li><li>Butterfly是hexo博客的一款主题。</li><li>Github Pages是github提供的一项静态站点托管服务。</li></ul><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="搭建本地Hexo"><a href="#搭建本地Hexo" class="headerlink" title="搭建本地Hexo"></a>搭建本地Hexo</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>本文采用nodejs的二进制安装方式，由于我的Linux机器为CentOS 7，安装最新版会报错，因此我选择安装12.15.0这个版本。  </p><pre><code># 进入根目录cd /usr/local/# 获取二进制安装包wget https://nodejs.org/download/release/v12.15.0/node-v12.15.0-linux-x64.tar.gz# 解压tar -xf node-v12.15.0-linux-x64.tar.gzrm -rf node-v12.15.0-linux-x64.tar.gz# 创建软件包链接ln -sv node-v12.15.0-linux-x64/ nodejs# 让命令可以直接执行ln -sv /usr/local/nodejs/bin/node /usr/local/binln -sv /usr/local/nodejs/bin/npm /usr/local/bin# 检查是否能够运行[root@localhost bin]# node -vv12.15.0[root@localhost bin]# npm -v6.13.4</code></pre><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>查看是否安装git。hexo初始化的时候需要使用git命令从github下载hexo相关代码，后期将博客部署到github上也依赖git。</p><pre><code>[root@localhost bin]# git --versiongit version 1.8.3.1</code></pre><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>在家目录下建立blob目录作为hexo的根目录</p><pre><code># 建立目录mkdir ~/blobcd ~/blob# 永久设置npm源（不修改执行的时候会卡住）npm config set registry https://registry.npm.taobao.org# 安装hexo-cli，nodejs的npm相当于Linux的yum[root@localhost blob]# npm install -g hexo-cli/usr/local/node-v12.15.0-linux-x64/bin/hexo -&gt; /usr/local/node-v12.15.0-linux-x64/lib/node_modules/hexo-cli/bin/hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules/hexo-cli/node_modules/chokidar/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-cli@4.3.0added 59 packages from 51 contributors in 5.498s# 初始化文件夹hexo init# 安装 hexo 所需要的依赖包npm install</code></pre><p>在安装中遇到如下问题：Error: ENOENT: no such file or directory, uv_cwd</p><p>解决方案：重启终端</p><h4 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h4><p>hexo 常用命令：</p><ul><li>hexo g 生成静态网站</li><li>hexo s 启动服务器</li><li>hexo d 部署</li><li>hexo clean 清理生成的静态网站</li></ul><p>部署：</p><pre><code>[root@192 blob]# hexo g &amp;&amp; hexo sINFO  Validating configINFO  Start processingINFO  Files loaded in 130 msINFO  Generated: archives/index.htmlINFO  Generated: archives/2022/index.htmlINFO  Generated: archives/2022/11/index.htmlINFO  Generated: index.htmlINFO  Generated: fancybox/jquery.fancybox.min.cssINFO  Generated: js/script.jsINFO  Generated: css/style.cssINFO  Generated: 2022/11/21/hello-world/index.htmlINFO  Generated: css/fonts/fontawesome-webfont.woffINFO  Generated: css/fonts/fontawesome-webfont.woff2INFO  Generated: css/fonts/FontAwesome.otfINFO  Generated: fancybox/jquery.fancybox.min.jsINFO  Generated: js/jquery-3.4.1.min.jsINFO  Generated: css/fonts/fontawesome-webfont.eotINFO  Generated: css/fonts/fontawesome-webfont.ttfINFO  Generated: css/images/banner.jpgINFO  Generated: css/fonts/fontawesome-webfont.svgINFO  17 files generated in 410 msINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code></pre><p>访问网站：<br><img src="https://yushuaigee.gitee.io/myblog/img/image-20201220204625063.png" alt="images"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>hexo的主题可以在github仓库中搜索hexo-theme或者hexo官网查找，本文使用的主题为butterfly。</p><pre><code># 从github仓库中下载主题（hexo根目录中）：git https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly# 修改hexo根目录下_config.xml 配置文件theme: landscape 改为 theme: butterfly# 重新部署hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><p>在浏览器中打开报如下问题：</p><pre><code># 显示内容：extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug解决方案（hexo根目录）：npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></pre><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1c51af39bb0820efc4ea19d42c7252b2?method=download&shareKey=577f858ad5b22a1545471f53e5f2416e" alt="image"></p><h3 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h3><p>至此，上面的博客已经具有了一个框架。下面我们进行相应的优化。参考博客：  </p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>更改博客主题、描述、作者、语言、时区（hexo根目录下配置文件）</p><pre><code># Sitetitle: 知与行subtitle: &#39;&#39;description: &#39;学而不思则惘，思而不学则殆&#39;keywords:  author: QiYanlanguage: zh-CNtimezone: Asia/Shanghai</code></pre><p>图像修改：背景图下载地址<a href="https://wallhaven.cc/">https://wallhaven.cc/</a> ，图像放到hexo_root&#x2F;themes&#x2F;主题名&#x2F;source&#x2F;img&#x2F;。如下修改的是主题配置文件（hexo_root&#x2F;theme&#x2F;主题名&#x2F;_config.xml）。</p><pre><code># 主页图index_img: /img/background.jpg    # 头像：avatar:  img: /img/avatar.png#文档图（cover:  # display the cover or not (是否顯示文章封面)  index_enable: false  aside_enable: false  archives_enable: false  # the position of cover in home page (封面顯示的位置)  # left/right/both  position: both  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)  default_cover: </code></pre><p>cover中设置default_cover之后，文件列表和文章内容的top图都是同一张图。<br>解决方案：<a href="https://blog.csdn.net/zzq0523/article/details/122954271">https://blog.csdn.net/zzq0523/article/details/122954271</a>）</p><p>修改菜单：</p><pre><code>menu:   首页: / || fas fa-home   归档: /archives/ || fas fa-archive   标签: /tags/ || fas fa-tags   分类: /categories/ || fas fa-folder-open  # List||fas fa-list:  #   Music: /music/ || fas fa-music  #   Movie: /movies/ || fas fa-video  # Link: /link/ || fas fa-link   关于: /about/ || fas fa-heart</code></pre><p>创建相关页面</p><pre><code>#前往你的 Hexo 博客的根目錄hexo new page tags#找到source/tags/index.md這個文件添加 type: &quot;tags&quot;并将title后的名字改为中文 ---title: 標籤date: 2018-01-05 00:00:00type: &quot;tags&quot;---# 添加分类页hexo new page categories---title: 分类date: 2022-11-21 08:20:51types: &quot;categories&quot;---</code></pre><p>添加动态文字：</p><pre><code>subtitle:  enable: true  # Typewriter Effect (打字效果)  effect: true  # Effect Speed Options (打字效果速度參數)  startDelay: 300 # time before typing starts in milliseconds  typeSpeed: 150 # type speed in milliseconds  backSpeed: 50 # backspacing speed in milliseconds  # loop (循環打字)  loop: true  # source 調用第三方服務  # source: false 關閉調用  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/  # source: 2  調用今日詩詞（簡體） https://www.jinrishici.com/  # subtitle 會先顯示 source , 再顯示 sub 的內容  source: false  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字  sub:    - 今日事&amp;#44;今日畢    - Never put off till tomorrow what you can do today</code></pre><p>安装搜索框</p><pre><code>[root@192 butterfly]# npm install hexo-generator-search --savenpm notice created a lockfile as package-lock.json. You should commit this file.+ hexo-generator-search@2.4.3added 6 packages from 5 contributors in 1.551s# 修改主题配置文件local_search:  enable: true# 重启hexo否则会报错hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><p>添加字数统计功能：</p><pre><code>npm install hexo-wordcount --save# 修改主题配置文件wordcount:     enable: true# 重启hexo</code></pre><p>给文章列表添加字数统计：  </p><p><a href="http://doraemonzzz.com/2021/06/13/2021-6-13-%E7%BB%99Hexo-Butterfly%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E5%A2%9E%E5%8A%A0%E5%AD%97%E6%95%B0%E6%80%BB%E8%AE%A1%EF%BC%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/">http://doraemonzzz.com/2021/06/13/2021-6-13-%E7%BB%99Hexo-Butterfly%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E5%A2%9E%E5%8A%A0%E5%AD%97%E6%95%B0%E6%80%BB%E8%AE%A1%EF%BC%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/</a></p><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p><a href="https://imbhj.com/25c13146/">https://imbhj.com/25c13146/</a><br><a href="https://jingzhi1208.github.io/2021/11/26/hexo-butterfly%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/">https://jingzhi1208.github.io/2021/11/26/hexo-butterfly%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/</a></p><h2 id="托管静态页面"><a href="#托管静态页面" class="headerlink" title="托管静态页面"></a>托管静态页面</h2><h3 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h3><p>首先在github中注册账号  </p><p>创建仓库。每个用户只能创建一个github pages，因此仓库名称必须为&lt;用户名&gt;.github.io，否则创建的为普通仓库</p><p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229224741804.png" alt="image">、</p><p>在github pages仓库中创建一个index.html文件用于测试  </p><p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229225639083.png" alt="image"></p><p>在浏览器页面输入https:&#x2F;&#x2F;用户名.github.io&#x2F; 查看是否访问成功  </p><p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229230057034.png" alt="image"></p><h3 id="免密登录github"><a href="#免密登录github" class="headerlink" title="免密登录github"></a>免密登录github</h3><p>CentOS中生成登录密钥：</p><pre><code># 其中 邮箱名 是你注册 GitHub 的邮箱ssh-keygen -t rsa -C &quot;邮箱名&quot; # 后面输入三个回车</code></pre><p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229233801498.png" alt="image"></p><p>CentOS 进入~&#x2F;.ssh目录，复制id_rsa.pub中的内容。将公钥复制到github中。</p><p><img src="https://yushuaigee.gitee.io/myblog/img/image-20201229235220955.png" alt="image"></p><p>测试是否能够正常连接：</p><pre><code>[root@192 images]# ssh -T git@github.comHi qiyankuo! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><p>安装部署插件</p><pre><code># 这样执行会报错[root@192 blob]# npm install hexo-deplyer-gitnpm ERR! code E404npm ERR! 404 Not Found - GET https://registry.npmmirror.com/hexo-deplyer-git - [NOT_FOUND] hexo-deplyer-git not foundnpm ERR! 404 npm ERR! 404  &#39;hexo-deplyer-git@latest&#39; is not in the npm registry.npm ERR! 404 You should bug the author to publish it (or use the name yourself!)npm ERR! 404 npm ERR! 404 Note that you can also install from anpm ERR! 404 tarball, folder, http url, or git url.npm ERR! A complete log of this run can be found in:npm ERR!     /root/.npm/_logs/2022-11-22T02_25_42_682Z-debug.log# 正确方式[root@192 blob]# npm install hexo-deployer-git --save# 修改hexo根目录下配置文件deploy:  type: &#39;git&#39;  repo: git@github.com:用户名/仓库名  #如：git@github.com:qiyankuo/qiyankuo.github.io.git  branch: main# 发布hexo clean &amp;&amp; hexo g &amp;&amp; hexo d </code></pre><p>在浏览器中输入https:&#x2F;&#x2F;用户名.github.io&#x2F;进行测试（这个可能会有些延迟）</p><h2 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h2><h3 id="git相关概念"><a href="#git相关概念" class="headerlink" title="git相关概念"></a>git相关概念</h3><p><a href="https://www.runoob.com/git/git-workspace-index-repo.html">https://www.runoob.com/git/git-workspace-index-repo.html</a></p><h3 id="创建仓库并上传图片"><a href="#创建仓库并上传图片" class="headerlink" title="创建仓库并上传图片"></a>创建仓库并上传图片</h3><p>在github中新建仓库images</p><p>在CentOS下关联github仓库，进行图片管理</p><pre><code># 先进入准备放置github仓库的目录cd ...# 克隆仓库git clone 仓库地址 # 如：https://github.io/qiyankuo/images# 将需要添加的图片移动到仓库目录中mv ... ...git add 文件名  # 添加xyz文件至indexgit commit -m &quot;描述&quot;  # 提交git remote origin git@github.com:qiyankuo/images.git  # 设置远程连接别名git push origin main  # 将本地内容提交到github中</code></pre><h3 id="引用图片地址"><a href="#引用图片地址" class="headerlink" title="引用图片地址"></a>引用图片地址</h3><p>在github中找到图像发现无法显示，在图片上右键在新标签中打开图像显示url如下：<a href="https://raw.githubusercontent.com/qiyankuo/images/main/hexo/betterfly.jpg">https://raw.githubusercontent.com/qiyankuo/images/main/hexo/betterfly.jpg</a></p><p>参照网上教程使用免费的CDN服务jsDriver进行github加速，但是我发现这个好像不能用。故我采用如下方式：</p><ul><li><p>github镜像 <a href="https://hub.nuaa.cf/">https://hub.nuaa.cf/</a> 访问上面的图片将githubusercontent.com修改为nuaa.cf。即</p><pre><code>  https://raw.nuaa.cf/qiyankuo/images/main/hexo/betterfly.jpg  注：这种方式发现本地部署和github pages中都无法查看</code></pre></li><li><p>Github RAW 加速服务<a href="https://www.7ed.net/start/raw-cdn.html">https://www.7ed.net/start/raw-cdn.html</a>，在githubusercontent中添加上s就可以了。即</p><pre><code>  [https://raw.githubusercontents.com/qiyankuo/images/main/hexo/betterfly.jpg](https://raw.githubusercontents.com/qiyankuo/images/main/hexo/betterfly.jpg)  注：这种方式发现本地部署可以查看，浏览器也可以查看，但是github pages页面中无法查看</code></pre></li><li><p>最终采用有道云笔记存储图片，或者可以用gitee存储图片。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note orange icon-padding flat"><p>    经过了三四天的时间终于将自己的个人博客搭建完成。搭建博客的过程中也遇到了很多问题。首先，原本准备使用next主题，但是这个主题有一些地方无法调整，当时想过放弃或者先搭建一个后期再通过学习前端进行修改。之后当看到51cto的博客样式，这个博客已经满足我的基本需要。当我无意中找到butterfly官网的文章之后，感觉这就是我想要的文章样式。</p><p>    其次，起初采用github搭建，但是考虑到github国内访问速度较慢。开始转gitee上搭建，但是gitee需要实名认证（被拒了）。继续github进行搭建。</p><p>    搭建完之后发现jsDriver不能使用，最终找到了Github RAW 加速服务进行替换。后期计划的话博客样式应该还会不断的进行调整。最后，准备使用typora和picgo搭建书写博客的环境，typora收费，picgo官网上说仅在Windows和macos进行了测试。</p><p>    目前更新了文章之后发布都是手动发布的，图片也是手动上传。我准备做一个shell脚本，自动完成图片的上传替换以及自动发布功能。当然，博客搭建完了。更重要的是不断的更新自己的知识，不断的发布博客。即不能为了发博客而写博客，也不能因为忙而不写博客。</p></div><div class="note green icon-padding flat"><p>参考文档：</p><p>https://zhuanlan.zhihu.com/p/105715224</p><p>https://zhuanlan.zhihu.com/p/105715224</p><p>https://butterfly.js.org/posts/dc584b87</p><p>https://yushuaigee.gitee.io/2020/12/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2(%E4%B8%80)%E2%80%94%E2%80%94%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6/</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue icon-padding flat&quot;&gt;
&lt;p&gt;为什么写博客？我写博客的原因有三点：将学到的内容表达出来、整合所学的内容串联成为系统、作为自己的知识库。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;为什么选择个人博客？我搭建个人博客的原因是由于个人博客</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/11/21/hello-world/"/>
    <id>http://example.com/2022/11/21/hello-world/</id>
    <published>2022-11-21T09:22:02.494Z</published>
    <updated>2022-11-21T09:22:02.491Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
